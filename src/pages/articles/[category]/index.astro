---
import Icon from '../../../lib/@ui/Icon'
import Text from '../../../lib/@ui/typography/Text'
import Layout from '../../../layouts/Layout.astro'
import Sidebar from '../../../layouts/Sidebar'
import categories from '../../../content/articles/_categories'
import Heading from '../../../lib/@ui/typography/Heading'
import FAB from '../../../lib/@ui/FAB'
import ToggleFAB from '../../../components/ToggleFAB'
import { CardArticle } from '../../../components/CardArticle'
import { getArticles } from '../../../content/articles'
import { generateUrl } from '../../api/og.png'
import Footer from '../../../components/Footer.astro'
import PageHeader from '../../../components/PageHeader.astro'
import BaseNav from '../../../components/BaseNav.astro'

export const prerender = true
export const getStaticPaths = async () => categories.map(category => ({
  params: { category: category.slug },
  props: { category }
}))

const {category} = Astro.props
const title = category.slug === 'all' ? category.name : `${category!.name} Articles`
const description = `Learn about ${category!.name} from Chris D. MacRae`
const ogImageUrl = generateUrl({ title, color: category!.color })
const isAll = category?.slug === 'all'
const articles = await getArticles({
  category: !isAll ? category!.slug : undefined,
  drafts: import.meta.env.DEV
})
---
<Layout 
  title={title} 
  description={description}
  graph={{
    og: {
      type: 'website',
      title: title,
      site_name: Astro.site!.origin,
      description: description,
      url: Astro.url.toString(),
      image: ogImageUrl.toString()
    }
  }}
>
  <div slot="sidebar" class="flex flex-col gap-2">
    <Sidebar.Header>
      <a href={`/`} class="py-1">
        <Text>
          <Icon name="chevron-left" size='sm' />
          Home
        </Text>
      </a>
    </Sidebar.Header>
    <BaseNav>
      <Text color='muted'>
        <strong>Featured Categories</strong>
      </Text>
      <div class="flex flex-col gap-2">
        {categories
          .filter(category => category?.featuredHref)
          .map(c => {
            const active = c.slug === category!.slug

            return (
            <Sidebar.Link href={c.featuredHref ? c.featuredHref : `/articles/${c.slug}`} active={active}>
              <Icon name={c.icon} />
              {c.name}
            </Sidebar.Link>
          )
        })}
      </div>
    </BaseNav>
  </div>

  <PageHeader>
    Browse
  </PageHeader>

  <div class="relative flex flex-row overflow-scroll w-[100vw] -mx-4 pr-4 md:max-w-[calc(100vw-19rem)]">
    <div class="w-full flex flex-row gap-2 p-4">
      {categories.map(c => {
        const isCurrent = c.slug === category?.slug

        return (
          <a href={`/articles/${c.slug}`} class="shrink-0 grow-0">
            <FAB.Button color={isCurrent ? 'dark' : 'muted'} fluid>
              <Icon name={c.icon} />
              {isCurrent && (<h1 class="shrink-0 grow"><strong>{c.name}</strong></h1>)}
              {!isCurrent && (<p class="shrink-0 grow">{c.name}</p>)}
            </FAB.Button>  
          </a>
        )
      })}
    </div>
  </div>

  <div class="flex flex-col gap-4">
    {articles.map(article => (
      <CardArticle article={article} readingTime={article.readingTime} />
    ))}
    {articles.length === 0 && (
      <div class="p-6">
        <Heading as='h2' size={4}>I'm still working on this content</Heading>
        <Text>Check back soon!</Text>
      </div>
    )}
  </div>

  <Footer />
</Layout>
