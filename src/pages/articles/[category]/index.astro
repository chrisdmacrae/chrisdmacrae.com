---
import { basename } from 'path'
import Icon from '../../../components/Icon'
import Text from '../../../components/typography/Text'
import Layout from '../../../layouts/Layout.astro'
import Sidebar from '../../../layouts/Sidebar'
import categories from '../../../content/articles/categories'
import Heading from '../../../components/typography/Heading'
import FAB from '../../../components/FAB'
import ToggleFAB from '../../../components/ToggleFAB'
import { CardArticle } from '../../../components/CardArticle'

const articles = (await Astro.glob('../../../content/articles/*.mdx')).map(article => ({
  ...article,
  slug: basename(article.file).split('.')[0]
}))
const category = categories.find(category => category.slug === Astro.params.category)
const categoryArticles = category?.slug === 'all'
  ? articles 
  : articles.filter(article => article.frontmatter.category === Astro.params.category)

if (!category || categoryArticles.length === 0) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found'
  })
}

const isAll = category?.slug === 'all'
---
<Layout title='Article about engineering, design, web development, and more'>
  <div slot="sidebar" class="flex flex-col gap-2">
    <Sidebar.Header>
      {isAll && (
        <a href="/">
          <Heading as="h1" size={3}>
            <Text gradient="warning" as="span">Chris D. Macrae</Text>
          </Heading>
        </a>
      )}
      {!isAll && (
        <a href={`/articles/all`}>
          <Text>
            <Icon name="chevron-left" size='sm' />
            All articles
          </Text>
        </a>
      )}
    </Sidebar.Header>
    <Text color='muted'>
      <strong>Featured Categories</strong>
    </Text>
    {categories
      .filter(category => category?.featured)
      .filter(c => c !== category)
      .map(category => (
        <Sidebar.Link href={`/articles/${category.slug}`}>
          <Icon name={category.icon} />
          {category.name}
        </Sidebar.Link>
    ))}
  </div>
  <div class="sticky top-0 flex flex-row justify-between pb-4 bg-slate-100 dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700">
    <Heading as='h2' size={4}>Browse</Heading>
    <ToggleFAB client:idle />
  </div>
  <div
    class="flex flex-row overflow-scroll w-full max-w-[100vw] md:max-w-[calc(100vw-19rem)]"
  >
    <div class="w-full flex flex-row gap-2 p-4">
      {categories.map(c => {
        const isCurrent = c.slug === category?.slug

        return (
          <a href={`/articles/${c.slug}`} class="shrink-0 grow">
            <FAB.Button color='muted' fluid>
              <Icon name={c.icon} />
              {isCurrent && (<h1 class="shrink-0 grow"><strong>{c.name}</strong></h1>)}
              {!isCurrent && (<p class="shrink-0 grow">{c.name}</p>)}
            </FAB.Button>  
          </a>
        )
      })}
    </div>
  </div>
  <div class="flex flex-col gap-4">
    {categoryArticles.map(article => (
      <CardArticle article={article} category={category!} />
    ))}
  </div>
</Layout>
